{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var addScalar = _ref.addScalar,\n    subtract = _ref.subtract,\n    flatten = _ref.flatten,\n    multiply = _ref.multiply,\n    multiplyScalar = _ref.multiplyScalar,\n    divideScalar = _ref.divideScalar,\n    sqrt = _ref.sqrt,\n    abs = _ref.abs,\n    bignumber = _ref.bignumber,\n    diag = _ref.diag,\n    inv = _ref.inv,\n    qr = _ref.qr,\n    usolve = _ref.usolve,\n    usolveAll = _ref.usolveAll,\n    equal = _ref.equal,\n    complex = _ref.complex,\n    larger = _ref.larger,\n    smaller = _ref.smaller,\n    matrixFromColumns = _ref.matrixFromColumns,\n    dot = _ref.dot;\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    }\n\n    // TODO check if any row/col are zero except the diagonal\n\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n    // MODIFIES arr by side effect!\n    var R = balance(arr, N, prec, type, findVectors);\n\n    // R is the row transformation matrix\n    // arr = A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // (And so to return to original matrix: A = R⁻¹ arr R)\n\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n    // MODIFIES arr by side effect!\n    reduceToHessenberg(arr, N, prec, type, findVectors, R);\n    // still true that original A = R⁻¹ arr R)\n\n    // find eigenvalues\n    var _iterateUntilTriangul = iterateUntilTriangular(arr, N, prec, type, findVectors),\n      values = _iterateUntilTriangul.values,\n      C = _iterateUntilTriangul.C;\n\n    // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms arr, the hessenberg\n    // matrix, to upper triangular\n    // (So U = C⁻¹ arr C and the relationship between current arr\n    // and original A is unchanged.)\n\n    var vectors;\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, R, values, prec, type);\n      vectors = matrixFromColumns.apply(void 0, _toConsumableArray(vectors));\n    }\n    return {\n      values: values,\n      vectors: vectors\n    };\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var realzero = big ? bignumber(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    var realone = big ? bignumber(1) : 1;\n\n    // base of the floating-point arithmetic\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix);\n\n    // the diagonal transformation matrix R\n    var Rdiag;\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    }\n\n    // this isn't the only time we loop thru the matrix...\n    var last = false;\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = realzero;\n        var rowNorm = realzero;\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]); // should be real\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n\n          var f = realone;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          }\n\n          // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95));\n\n          // apply balancing similarity transformation\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            }\n\n            // keep track of transformations\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    }\n\n    // return the diagonal row transformation matrix\n    return diag(Rdiag);\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    if (big) {\n      prec = bignumber(prec);\n    }\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n\n      var maxIndex = 0;\n      var max = zero;\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      }\n\n      // This col is pivoted, no need to do anything\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1;\n\n        // Interchange maxIndex-th and (i+1)-th column\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      }\n\n      // Reduce following rows and columns\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n        if (n === 0) {\n          continue;\n        }\n\n        // from j-th row subtract n-times (i+1)th row\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        }\n\n        // to (i+1)th column add n-times j-th column\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n    return R;\n  }\n\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n    var arr = clone(A);\n\n    // the list of converged eigenvalues\n    var lambdas = [];\n\n    // size of arr, which will get smaller as eigenvalues converge\n    var n = N;\n\n    // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n    var Sdiag = [];\n\n    // N×N matrix describing the overall transformation done during the QR algorithm\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined;\n\n    // n×n matrix describing the QR transformations done since last convergence\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined;\n\n    // last eigenvalue converged before this many steps\n    var lastConvergenceBefore = 0;\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1;\n\n      // TODO if the convergence is slow, do something clever\n\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      }\n\n      // TODO do an implicit QR transformation\n      var _qr = qr(arr),\n        Q = _qr.Q,\n        R = _qr.R;\n      arr = multiply(R, Q);\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      }\n\n      // keep track of transformations\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      }\n\n      // The rightmost diagonal element converged to an eigenvalue\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]);\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 1;\n        arr.pop();\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        }\n\n        // The rightmost diagonal 2x2 block converged\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push.apply(lambdas, _toConsumableArray(ll));\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 2;\n        arr.pop();\n        arr.pop();\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n          arr[_i3].pop();\n        }\n      }\n      if (n === 0) {\n        break;\n      }\n    }\n\n    // standard sorting\n    lambdas.sort(function (a, b) {\n      return +subtract(abs(a), abs(b));\n    });\n\n    // the algorithm didn't converge\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    }\n\n    // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C: C\n    };\n  }\n\n  /**\n   * @param {Matrix} A hessenberg-form matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {Matrix} R similarity that turns original matrix into A\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n  function findEigenvectors(A, N, C, R, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n    var uniqueValues = [];\n    var multiplicities = [];\n    var _iterator = _createForOfIteratorHelper(values),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var λ = _step.value;\n        var i = indexOf(uniqueValues, λ, equal);\n        if (i === -1) {\n          uniqueValues.push(λ);\n          multiplicities.push(1);\n        } else {\n          multiplicities[i] += 1;\n        }\n      }\n\n      // find eigenvectors by solving U − λE = 0\n      // TODO replace with an iterative eigenvector algorithm\n      // (this one might fail for imprecise eigenvalues)\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one));\n\n    // eigenvalues for which usolve failed (due to numerical error)\n    var failedLambdas = [];\n    var _loop = function _loop(_i4) {\n      var λ = uniqueValues[_i4];\n      var S = subtract(U, multiply(λ, E)); // the characteristic matrix\n\n      var solutions = usolveAll(S, b);\n      solutions.shift(); // ignore the null vector\n\n      // looks like we missed something, try inverse iteration\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(S, N, solutions, prec, type);\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(λ);\n          break;\n        }\n        solutions.push(approxVec);\n      }\n\n      // Transform back into original array coordinates\n      var correction = multiply(inv(R), C);\n      solutions = solutions.map(function (v) {\n        return multiply(correction, v);\n      });\n      vectors.push.apply(vectors, _toConsumableArray(solutions.map(function (v) {\n        return flatten(v);\n      })));\n    };\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      _loop(_i4);\n    }\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n    return vectors;\n  }\n\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // matrix is already upper triangular\n    // return an identity matrix\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    }\n\n    // matrix is diagonalizable\n    // return its eigenvectors as columns\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    }\n\n    // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      var _arr$i;\n      (_arr$i = arr[i]).push.apply(_arr$i, _toConsumableArray(Array(N - arr[i].length).fill(0)));\n    }\n\n    // add rows\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n    return arr;\n  }\n\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n  function blockDiag(arr, N) {\n    var M = [];\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n    var I = 0;\n    var _iterator2 = _createForOfIteratorHelper(arr),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var sub = _step2.value;\n        var n = sub.length;\n        for (var _i6 = 0; _i6 < n; _i6++) {\n          for (var j = 0; j < n; j++) {\n            M[I + _i6][I + j] = sub[_i6][j];\n          }\n        }\n        I += n;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return M;\n  }\n\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n\n    // you better choose a random vector before I count to five\n    var i = 0;\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n      if (++i >= 5) {\n        return null;\n      }\n    }\n\n    // you better converge before I count to ten\n    i = 0;\n    while (true) {\n      var c = usolve(A, b);\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n      if (++i >= 10) {\n        return null;\n      }\n      b = normalize(c);\n    }\n    return b;\n  }\n\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n\n    // generate random vector with the correct type\n    var v = Array(N).fill(0).map(function (_) {\n      return 2 * Math.random() - 1;\n    });\n    if (big) {\n      v = v.map(function (n) {\n        return bignumber(n);\n      });\n    }\n    if (cplx) {\n      v = v.map(function (n) {\n        return complex(n);\n      });\n    }\n\n    // project to orthogonal complement\n    v = orthogonalComplement(v, orthog);\n\n    // normalize\n    return normalize(v, type);\n  }\n\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n  function orthogonalComplement(v, orthog) {\n    var _iterator3 = _createForOfIteratorHelper(orthog),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var w = _step3.value;\n        // v := v − (w, v)/∥w∥² w\n        v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return v;\n  }\n\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n  return complexEigs;\n}","map":{"version":3,"names":["clone","createComplexEigs","_ref","addScalar","subtract","flatten","multiply","multiplyScalar","divideScalar","sqrt","abs","bignumber","diag","inv","qr","usolve","usolveAll","equal","complex","larger","smaller","matrixFromColumns","dot","complexEigs","arr","N","prec","type","findVectors","undefined","R","balance","reduceToHessenberg","_iterateUntilTriangul","iterateUntilTriangular","values","C","vectors","findEigenvectors","apply","_toConsumableArray","big","cplx","realzero","one","realone","radix","radixSq","Rdiag","Array","fill","last","i","colNorm","rowNorm","j","c","f","_c","rowDivRadix","rowMulRadix","condition","g","_j","zero","maxIndex","max","el","tmp1","_j2","tmp2","tmp3","_j3","n","k","_k","_k2","A","lambdas","Sdiag","Qtotal","Qpartial","lastConvergenceBefore","_qr","Q","_i","push","unshift","inflateMatrix","pop","_i2","ll","eigenvalues2x2","jordanBase2x2","_i3","sort","a","b","err","Error","join","blockDiag","Cinv","U","uniqueValues","multiplicities","_iterator","_createForOfIteratorHelper","_step","s","done","λ","value","indexOf","e","len","length","E","failedLambdas","_loop","_i4","S","solutions","shift","approxVec","inverseIterate","correction","map","v","d","trA","detA","x","y","l1","l2","na","nb","nc","nd","_arr$i","_i5","M","I","_iterator2","_step2","sub","_i6","fn","orthog","largeNum","randomOrthogonalVector","norm","orthogonalComplement","normalize","_","Math","random","_iterator3","_step3","w"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/function/matrix/eigs/complexEigs.js"],"sourcesContent":["import { clone } from '../../../utils/object.js';\nexport function createComplexEigs(_ref) {\n  var {\n    addScalar,\n    subtract,\n    flatten,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    inv,\n    qr,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  /**\n   * @param {number[][]} arr the matrix to find eigenvalues of\n   * @param {number} N size of the matrix\n   * @param {number|BigNumber} prec precision, anything lower will be considered zero\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors should we find eigenvectors?\n   *\n   * @returns {{ values: number[], vectors: number[][] }}\n   */\n  function complexEigs(arr, N, prec, type, findVectors) {\n    if (findVectors === undefined) {\n      findVectors = true;\n    }\n\n    // TODO check if any row/col are zero except the diagonal\n\n    // make sure corresponding rows and columns have similar magnitude\n    // important because of numerical stability\n    // MODIFIES arr by side effect!\n    var R = balance(arr, N, prec, type, findVectors);\n\n    // R is the row transformation matrix\n    // arr = A' = R A R⁻¹, A is the original matrix\n    // (if findVectors is false, R is undefined)\n    // (And so to return to original matrix: A = R⁻¹ arr R)\n\n    // TODO if magnitudes of elements vary over many orders,\n    // move greatest elements to the top left corner\n\n    // using similarity transformations, reduce the matrix\n    // to Hessenberg form (upper triangular plus one subdiagonal row)\n    // updates the transformation matrix R with new row operationsq\n    // MODIFIES arr by side effect!\n    reduceToHessenberg(arr, N, prec, type, findVectors, R);\n    // still true that original A = R⁻¹ arr R)\n\n    // find eigenvalues\n    var {\n      values,\n      C\n    } = iterateUntilTriangular(arr, N, prec, type, findVectors);\n\n    // values is the list of eigenvalues, C is the column\n    // transformation matrix that transforms arr, the hessenberg\n    // matrix, to upper triangular\n    // (So U = C⁻¹ arr C and the relationship between current arr\n    // and original A is unchanged.)\n\n    var vectors;\n    if (findVectors) {\n      vectors = findEigenvectors(arr, N, C, R, values, prec, type);\n      vectors = matrixFromColumns(...vectors);\n    }\n    return {\n      values,\n      vectors\n    };\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]}\n   */\n  function balance(arr, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var realzero = big ? bignumber(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    var realone = big ? bignumber(1) : 1;\n\n    // base of the floating-point arithmetic\n    var radix = big ? bignumber(10) : 2;\n    var radixSq = multiplyScalar(radix, radix);\n\n    // the diagonal transformation matrix R\n    var Rdiag;\n    if (findVectors) {\n      Rdiag = Array(N).fill(one);\n    }\n\n    // this isn't the only time we loop thru the matrix...\n    var last = false;\n    while (!last) {\n      // ...haha I'm joking! unless...\n      last = true;\n      for (var i = 0; i < N; i++) {\n        // compute the taxicab norm of i-th column and row\n        // TODO optimize for complex numbers\n        var colNorm = realzero;\n        var rowNorm = realzero;\n        for (var j = 0; j < N; j++) {\n          if (i === j) continue;\n          var c = abs(arr[i][j]); // should be real\n          colNorm = addScalar(colNorm, c);\n          rowNorm = addScalar(rowNorm, c);\n        }\n        if (!equal(colNorm, 0) && !equal(rowNorm, 0)) {\n          // find integer power closest to balancing the matrix\n          // (we want to scale only by integer powers of radix,\n          // so that we don't lose any precision due to round-off)\n\n          var f = realone;\n          var _c = colNorm;\n          var rowDivRadix = divideScalar(rowNorm, radix);\n          var rowMulRadix = multiplyScalar(rowNorm, radix);\n          while (smaller(_c, rowDivRadix)) {\n            _c = multiplyScalar(_c, radixSq);\n            f = multiplyScalar(f, radix);\n          }\n          while (larger(_c, rowMulRadix)) {\n            _c = divideScalar(_c, radixSq);\n            f = divideScalar(f, radix);\n          }\n\n          // check whether balancing is needed\n          // condition = (c + rowNorm) / f < 0.95 * (colNorm + rowNorm)\n          var condition = smaller(divideScalar(addScalar(_c, rowNorm), f), multiplyScalar(addScalar(colNorm, rowNorm), 0.95));\n\n          // apply balancing similarity transformation\n          if (condition) {\n            // we should loop once again to check whether\n            // another rebalancing is needed\n            last = false;\n            var g = divideScalar(1, f);\n            for (var _j = 0; _j < N; _j++) {\n              if (i === _j) {\n                continue;\n              }\n              arr[i][_j] = multiplyScalar(arr[i][_j], f);\n              arr[_j][i] = multiplyScalar(arr[_j][i], g);\n            }\n\n            // keep track of transformations\n            if (findVectors) {\n              Rdiag[i] = multiplyScalar(Rdiag[i], f);\n            }\n          }\n        }\n      }\n    }\n\n    // return the diagonal row transformation matrix\n    return diag(Rdiag);\n  }\n\n  /**\n   * @param {number[][]} arr\n   * @param {number} N\n   * @param {number} prec\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @param {boolean} findVectors\n   * @param {number[][]} R the row transformation matrix that will be modified\n   */\n  function reduceToHessenberg(arr, N, prec, type, findVectors, R) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    if (big) {\n      prec = bignumber(prec);\n    }\n    for (var i = 0; i < N - 2; i++) {\n      // Find the largest subdiag element in the i-th col\n\n      var maxIndex = 0;\n      var max = zero;\n      for (var j = i + 1; j < N; j++) {\n        var el = arr[j][i];\n        if (smaller(abs(max), abs(el))) {\n          max = el;\n          maxIndex = j;\n        }\n      }\n\n      // This col is pivoted, no need to do anything\n      if (smaller(abs(max), prec)) {\n        continue;\n      }\n      if (maxIndex !== i + 1) {\n        // Interchange maxIndex-th and (i+1)-th row\n        var tmp1 = arr[maxIndex];\n        arr[maxIndex] = arr[i + 1];\n        arr[i + 1] = tmp1;\n\n        // Interchange maxIndex-th and (i+1)-th column\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          var tmp2 = arr[_j2][maxIndex];\n          arr[_j2][maxIndex] = arr[_j2][i + 1];\n          arr[_j2][i + 1] = tmp2;\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          var tmp3 = R[maxIndex];\n          R[maxIndex] = R[i + 1];\n          R[i + 1] = tmp3;\n        }\n      }\n\n      // Reduce following rows and columns\n      for (var _j3 = i + 2; _j3 < N; _j3++) {\n        var n = divideScalar(arr[_j3][i], max);\n        if (n === 0) {\n          continue;\n        }\n\n        // from j-th row subtract n-times (i+1)th row\n        for (var k = 0; k < N; k++) {\n          arr[_j3][k] = subtract(arr[_j3][k], multiplyScalar(n, arr[i + 1][k]));\n        }\n\n        // to (i+1)th column add n-times j-th column\n        for (var _k = 0; _k < N; _k++) {\n          arr[_k][i + 1] = addScalar(arr[_k][i + 1], multiplyScalar(n, arr[_k][_j3]));\n        }\n\n        // keep track of transformations\n        if (findVectors) {\n          for (var _k2 = 0; _k2 < N; _k2++) {\n            R[_j3][_k2] = subtract(R[_j3][_k2], multiplyScalar(n, R[i + 1][_k2]));\n          }\n        }\n      }\n    }\n    return R;\n  }\n\n  /**\n   * @returns {{values: values, C: Matrix}}\n   * @see Press, Wiliams: Numerical recipes in Fortran 77\n   * @see https://en.wikipedia.org/wiki/QR_algorithm\n   */\n  function iterateUntilTriangular(A, N, prec, type, findVectors) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    if (big) {\n      prec = bignumber(prec);\n    }\n\n    // The Francis Algorithm\n    // The core idea of this algorithm is that doing successive\n    // A' = Q⁺AQ transformations will eventually converge to block-\n    // upper-triangular with diagonal blocks either 1x1 or 2x2.\n    // The Q here is the one from the QR decomposition, A = QR.\n    // Since the eigenvalues of a block-upper-triangular matrix are\n    // the eigenvalues of its diagonal blocks and we know how to find\n    // eigenvalues of a 2x2 matrix, we know the eigenvalues of A.\n\n    var arr = clone(A);\n\n    // the list of converged eigenvalues\n    var lambdas = [];\n\n    // size of arr, which will get smaller as eigenvalues converge\n    var n = N;\n\n    // the diagonal of the block-diagonal matrix that turns\n    // converged 2x2 matrices into upper triangular matrices\n    var Sdiag = [];\n\n    // N×N matrix describing the overall transformation done during the QR algorithm\n    var Qtotal = findVectors ? diag(Array(N).fill(one)) : undefined;\n\n    // n×n matrix describing the QR transformations done since last convergence\n    var Qpartial = findVectors ? diag(Array(n).fill(one)) : undefined;\n\n    // last eigenvalue converged before this many steps\n    var lastConvergenceBefore = 0;\n    while (lastConvergenceBefore <= 100) {\n      lastConvergenceBefore += 1;\n\n      // TODO if the convergence is slow, do something clever\n\n      // Perform the factorization\n\n      var k = 0; // TODO set close to an eigenvalue\n\n      for (var i = 0; i < n; i++) {\n        arr[i][i] = subtract(arr[i][i], k);\n      }\n\n      // TODO do an implicit QR transformation\n      var {\n        Q,\n        R\n      } = qr(arr);\n      arr = multiply(R, Q);\n      for (var _i = 0; _i < n; _i++) {\n        arr[_i][_i] = addScalar(arr[_i][_i], k);\n      }\n\n      // keep track of transformations\n      if (findVectors) {\n        Qpartial = multiply(Qpartial, Q);\n      }\n\n      // The rightmost diagonal element converged to an eigenvalue\n      if (n === 1 || smaller(abs(arr[n - 1][n - 2]), prec)) {\n        lastConvergenceBefore = 0;\n        lambdas.push(arr[n - 1][n - 1]);\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift([[1]]);\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 1) {\n            Qpartial = diag(Array(n - 1).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 1;\n        arr.pop();\n        for (var _i2 = 0; _i2 < n; _i2++) {\n          arr[_i2].pop();\n        }\n\n        // The rightmost diagonal 2x2 block converged\n      } else if (n === 2 || smaller(abs(arr[n - 2][n - 3]), prec)) {\n        lastConvergenceBefore = 0;\n        var ll = eigenvalues2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1]);\n        lambdas.push(...ll);\n\n        // keep track of transformations\n        if (findVectors) {\n          Sdiag.unshift(jordanBase2x2(arr[n - 2][n - 2], arr[n - 2][n - 1], arr[n - 1][n - 2], arr[n - 1][n - 1], ll[0], ll[1], prec, type));\n          inflateMatrix(Qpartial, N);\n          Qtotal = multiply(Qtotal, Qpartial);\n          if (n > 2) {\n            Qpartial = diag(Array(n - 2).fill(one));\n          }\n        }\n\n        // reduce the matrix size\n        n -= 2;\n        arr.pop();\n        arr.pop();\n        for (var _i3 = 0; _i3 < n; _i3++) {\n          arr[_i3].pop();\n          arr[_i3].pop();\n        }\n      }\n      if (n === 0) {\n        break;\n      }\n    }\n\n    // standard sorting\n    lambdas.sort((a, b) => +subtract(abs(a), abs(b)));\n\n    // the algorithm didn't converge\n    if (lastConvergenceBefore > 100) {\n      var err = Error('The eigenvalues failed to converge. Only found these eigenvalues: ' + lambdas.join(', '));\n      err.values = lambdas;\n      err.vectors = [];\n      throw err;\n    }\n\n    // combine the overall QR transformation Qtotal with the subsequent\n    // transformation S that turns the diagonal 2x2 blocks to upper triangular\n    var C = findVectors ? multiply(Qtotal, blockDiag(Sdiag, N)) : undefined;\n    return {\n      values: lambdas,\n      C\n    };\n  }\n\n  /**\n   * @param {Matrix} A hessenberg-form matrix\n   * @param {number} N size of A\n   * @param {Matrix} C column transformation matrix that turns A into upper triangular\n   * @param {Matrix} R similarity that turns original matrix into A\n   * @param {number[]} values array of eigenvalues of A\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {number[][]} eigenvalues\n   */\n  function findEigenvectors(A, N, C, R, values, prec, type) {\n    var Cinv = inv(C);\n    var U = multiply(Cinv, A, C);\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // turn values into a kind of \"multiset\"\n    // this way it is easier to find eigenvectors\n    var uniqueValues = [];\n    var multiplicities = [];\n    for (var λ of values) {\n      var i = indexOf(uniqueValues, λ, equal);\n      if (i === -1) {\n        uniqueValues.push(λ);\n        multiplicities.push(1);\n      } else {\n        multiplicities[i] += 1;\n      }\n    }\n\n    // find eigenvectors by solving U − λE = 0\n    // TODO replace with an iterative eigenvector algorithm\n    // (this one might fail for imprecise eigenvalues)\n\n    var vectors = [];\n    var len = uniqueValues.length;\n    var b = Array(N).fill(zero);\n    var E = diag(Array(N).fill(one));\n\n    // eigenvalues for which usolve failed (due to numerical error)\n    var failedLambdas = [];\n    var _loop = function _loop(_i4) {\n      var λ = uniqueValues[_i4];\n      var S = subtract(U, multiply(λ, E)); // the characteristic matrix\n\n      var solutions = usolveAll(S, b);\n      solutions.shift(); // ignore the null vector\n\n      // looks like we missed something, try inverse iteration\n      while (solutions.length < multiplicities[_i4]) {\n        var approxVec = inverseIterate(S, N, solutions, prec, type);\n        if (approxVec == null) {\n          // no more vectors were found\n          failedLambdas.push(λ);\n          break;\n        }\n        solutions.push(approxVec);\n      }\n\n      // Transform back into original array coordinates\n      var correction = multiply(inv(R), C);\n      solutions = solutions.map(v => multiply(correction, v));\n      vectors.push(...solutions.map(v => flatten(v)));\n    };\n    for (var _i4 = 0; _i4 < len; _i4++) {\n      _loop(_i4);\n    }\n    if (failedLambdas.length !== 0) {\n      var err = new Error('Failed to find eigenvectors for the following eigenvalues: ' + failedLambdas.join(', '));\n      err.values = values;\n      err.vectors = vectors;\n      throw err;\n    }\n    return vectors;\n  }\n\n  /**\n   * Compute the eigenvalues of an 2x2 matrix\n   * @return {[number,number]}\n   */\n  function eigenvalues2x2(a, b, c, d) {\n    // λ± = ½ trA ± ½ √( tr²A - 4 detA )\n    var trA = addScalar(a, d);\n    var detA = subtract(multiplyScalar(a, d), multiplyScalar(b, c));\n    var x = multiplyScalar(trA, 0.5);\n    var y = multiplyScalar(sqrt(subtract(multiplyScalar(trA, trA), multiplyScalar(4, detA))), 0.5);\n    return [addScalar(x, y), subtract(x, y)];\n  }\n\n  /**\n   * For an 2x2 matrix compute the transformation matrix S,\n   * so that SAS⁻¹ is an upper triangular matrix\n   * @return {[[number,number],[number,number]]}\n   * @see https://math.berkeley.edu/~ogus/old/Math_54-05/webfoils/jordan.pdf\n   * @see http://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n   */\n  function jordanBase2x2(a, b, c, d, l1, l2, prec, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var zero = big ? bignumber(0) : cplx ? complex(0) : 0;\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n\n    // matrix is already upper triangular\n    // return an identity matrix\n    if (smaller(abs(c), prec)) {\n      return [[one, zero], [zero, one]];\n    }\n\n    // matrix is diagonalizable\n    // return its eigenvectors as columns\n    if (larger(abs(subtract(l1, l2)), prec)) {\n      return [[subtract(l1, d), subtract(l2, d)], [c, c]];\n    }\n\n    // matrix is not diagonalizable\n    // compute off-diagonal elements of N = A - λI\n    // N₁₂ = 0 ⇒ S = ( N⃗₁, I⃗₁ )\n    // N₁₂ ≠ 0 ⇒ S = ( N⃗₂, I⃗₂ )\n\n    var na = subtract(a, l1);\n    var nb = subtract(b, l1);\n    var nc = subtract(c, l1);\n    var nd = subtract(d, l1);\n    if (smaller(abs(nb), prec)) {\n      return [[na, one], [nc, zero]];\n    } else {\n      return [[nb, zero], [nd, one]];\n    }\n  }\n\n  /**\n   * Enlarge the matrix from n×n to N×N, setting the new\n   * elements to 1 on diagonal and 0 elsewhere\n   */\n  function inflateMatrix(arr, N) {\n    // add columns\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].push(...Array(N - arr[i].length).fill(0));\n    }\n\n    // add rows\n    for (var _i5 = arr.length; _i5 < N; _i5++) {\n      arr.push(Array(N).fill(0));\n      arr[_i5][_i5] = 1;\n    }\n    return arr;\n  }\n\n  /**\n   * Create a block-diagonal matrix with the given square matrices on the diagonal\n   * @param {Matrix[] | number[][][]} arr array of matrices to be placed on the diagonal\n   * @param {number} N the size of the resulting matrix\n   */\n  function blockDiag(arr, N) {\n    var M = [];\n    for (var i = 0; i < N; i++) {\n      M[i] = Array(N).fill(0);\n    }\n    var I = 0;\n    for (var sub of arr) {\n      var n = sub.length;\n      for (var _i6 = 0; _i6 < n; _i6++) {\n        for (var j = 0; j < n; j++) {\n          M[I + _i6][I + j] = sub[_i6][j];\n        }\n      }\n      I += n;\n    }\n    return M;\n  }\n\n  /**\n   * Finds the index of an element in an array using a custom equality function\n   * @template T\n   * @param {Array<T>} arr array in which to search\n   * @param {T} el the element to find\n   * @param {function(T, T): boolean} fn the equality function, first argument is an element of `arr`, the second is always `el`\n   * @returns {number} the index of `el`, or -1 when it's not in `arr`\n   */\n  function indexOf(arr, el, fn) {\n    for (var i = 0; i < arr.length; i++) {\n      if (fn(arr[i], el)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Provided a near-singular upper-triangular matrix A and a list of vectors,\n   * finds an eigenvector of A with the smallest eigenvalue, which is orthogonal\n   * to each vector in the list\n   * @template T\n   * @param {T[][]} A near-singular square matrix\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {number} prec epsilon\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @return {T[] | null} eigenvector\n   *\n   * @see Numerical Recipes for Fortran 77 – 11.7 Eigenvalues or Eigenvectors by Inverse Iteration\n   */\n  function inverseIterate(A, N, orthog, prec, type) {\n    var largeNum = type === 'BigNumber' ? bignumber(1000) : 1000;\n    var b; // the vector\n\n    // you better choose a random vector before I count to five\n    var i = 0;\n    while (true) {\n      b = randomOrthogonalVector(N, orthog, type);\n      b = usolve(A, b);\n      if (larger(norm(b), largeNum)) {\n        break;\n      }\n      if (++i >= 5) {\n        return null;\n      }\n    }\n\n    // you better converge before I count to ten\n    i = 0;\n    while (true) {\n      var c = usolve(A, b);\n      if (smaller(norm(orthogonalComplement(b, [c])), prec)) {\n        break;\n      }\n      if (++i >= 10) {\n        return null;\n      }\n      b = normalize(c);\n    }\n    return b;\n  }\n\n  /**\n   * Generates a random unit vector of dimension N, orthogonal to each vector in the list\n   * @template T\n   * @param {number} N dimension\n   * @param {T[][]} orthog list of vectors\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} random vector\n   */\n  function randomOrthogonalVector(N, orthog, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n\n    // generate random vector with the correct type\n    var v = Array(N).fill(0).map(_ => 2 * Math.random() - 1);\n    if (big) {\n      v = v.map(n => bignumber(n));\n    }\n    if (cplx) {\n      v = v.map(n => complex(n));\n    }\n\n    // project to orthogonal complement\n    v = orthogonalComplement(v, orthog);\n\n    // normalize\n    return normalize(v, type);\n  }\n\n  /**\n   * Project vector v to the orthogonal complement of an array of vectors\n   */\n  function orthogonalComplement(v, orthog) {\n    for (var w of orthog) {\n      // v := v − (w, v)/∥w∥² w\n      v = subtract(v, multiply(divideScalar(dot(w, v), dot(w, w)), w));\n    }\n    return v;\n  }\n\n  /**\n   * Calculate the norm of a vector.\n   * We can't use math.norm because factory can't handle circular dependency.\n   * Seriously, I'm really fed up with factory.\n   */\n  function norm(v) {\n    return abs(sqrt(dot(v, v)));\n  }\n\n  /**\n   * Normalize a vector\n   * @template T\n   * @param {T[]} v\n   * @param {'number'|'BigNumber'|'Complex'} type\n   * @returns {T[]} normalized vec\n   */\n  function normalize(v, type) {\n    var big = type === 'BigNumber';\n    var cplx = type === 'Complex';\n    var one = big ? bignumber(1) : cplx ? complex(1) : 1;\n    return multiply(divideScalar(one, norm(v)), v);\n  }\n  return complexEigs;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}