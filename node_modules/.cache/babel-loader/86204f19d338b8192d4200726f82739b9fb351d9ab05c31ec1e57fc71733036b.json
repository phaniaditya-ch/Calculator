{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix', 'concat'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    addScalar = _ref.addScalar,\n    unaryMinus = _ref.unaryMinus,\n    DenseMatrix = _ref.DenseMatrix,\n    concat = _ref.concat;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed: typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed: typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix,\n    concat: concat\n  });\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        if (x.value === null) {\n          throw new Error('Parameter x contains a unit with undefined value');\n        }\n        if (y.value === null) {\n          throw new Error('Parameter y contains a unit with undefined value');\n        }\n        if (!x.equalBase(y)) {\n          throw new Error('Units do not match');\n        }\n        var res = x.clone();\n        res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n        res.fixPrefix = false;\n        return res;\n      };\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo03xDSf","createMatAlgo05xSfSf","createMatAlgo10xSids","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createSubtract","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","concat","matAlgo01xDSid","matAlgo03xDSf","matAlgo05xSfSf","matAlgo10xSids","matAlgo12xSfs","matrixAlgorithmSuite","numberNumber","x","y","ComplexComplex","sub","BigNumberBigNumber","minus","FractionFraction","referToSelf","self","value","Error","equalBase","res","clone","find","valueType","fixPrefix","SS","DS","SD","Ss","sS"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/function/arithmetic/subtract.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix', 'concat'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix,\n    concat\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': (x, y) => x - y,\n    'Complex, Complex': (x, y) => x.sub(y),\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\n    'Fraction, Fraction': (x, y) => x.sub(y),\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}