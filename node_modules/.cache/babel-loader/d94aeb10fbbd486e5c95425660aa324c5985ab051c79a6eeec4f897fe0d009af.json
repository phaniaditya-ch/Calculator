{"ast":null,"code":"import _classCallCheck from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var ResultSet = _ref.ResultSet,\n    Node = _ref.Node;\n  var BlockNode = /*#__PURE__*/function (_Node) {\n    _inherits(BlockNode, _Node);\n    var _super = _createSuper(BlockNode);\n    /**\n     * @constructor BlockNode\n     * @extends {Node}\n     * Holds a set with blocks\n     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n     *            An array with blocks, where a block is constructed as an\n     *            Object with properties block, which is a Node, and visible,\n     *            which is a boolean. The property visible is optional and\n     *            is true by default\n     */\n    function BlockNode(blocks) {\n      var _this;\n      _classCallCheck(this, BlockNode);\n      _this = _super.call(this);\n      // validate input, copy blocks\n      if (!Array.isArray(blocks)) throw new Error('Array expected');\n      _this.blocks = blocks.map(function (block) {\n        var node = block && block.node;\n        var visible = block && block.visible !== undefined ? block.visible : true;\n        if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n        if (typeof visible !== 'boolean') {\n          throw new TypeError('Property \"visible\" must be a boolean');\n        }\n        return {\n          node: node,\n          visible: visible\n        };\n      });\n      return _this;\n    }\n    _createClass(BlockNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isBlockNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalBlocks = map(this.blocks, function (block) {\n          return {\n            evaluate: block.node._compile(math, argNames),\n            visible: block.visible\n          };\n        });\n        return function evalBlockNodes(scope, args, context) {\n          var results = [];\n          forEach(evalBlocks, function evalBlockNode(block) {\n            var result = block.evaluate(scope, args, context);\n            if (block.visible) {\n              results.push(result);\n            }\n          });\n          return new ResultSet(results);\n        };\n      }\n\n      /**\n       * Execute a callback for each of the child blocks of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        for (var i = 0; i < this.blocks.length; i++) {\n          callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n        }\n      }\n\n      /**\n       * Create a new BlockNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {BlockNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var blocks = [];\n        for (var i = 0; i < this.blocks.length; i++) {\n          var block = this.blocks[i];\n          var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n          blocks[i] = {\n            node: node,\n            visible: block.visible\n          };\n        }\n        return new BlockNode(blocks);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {BlockNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var blocks = this.blocks.map(function (block) {\n          return {\n            node: block.node,\n            visible: block.visible\n          };\n        });\n        return new BlockNode(blocks);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        return this.blocks.map(function (param) {\n          return param.node.toString(options) + (param.visible ? '' : ';');\n        }).join('\\n');\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          blocks: this.blocks\n        };\n      }\n\n      /**\n       * Instantiate an BlockNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n       *     where mathjs is optional\n       * @returns {BlockNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toHTML(options) {\n        return this.blocks.map(function (param) {\n          return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n        }).join('<span class=\"math-separator\"><br /></span>');\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        return this.blocks.map(function (param) {\n          return param.node.toTex(options) + (param.visible ? '' : ';');\n        }).join('\\\\;\\\\;\\n');\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new BlockNode(json.blocks);\n      }\n    }]);\n    return BlockNode;\n  }(Node);\n  _defineProperty(BlockNode, \"name\", name);\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","forEach","map","factory","name","dependencies","createBlockNode","_ref","ResultSet","Node","BlockNode","_Node","_inherits","_super","_createSuper","blocks","_this","_classCallCheck","call","Array","isArray","Error","block","node","visible","undefined","TypeError","_createClass","key","get","value","_compile","math","argNames","evalBlocks","evaluate","evalBlockNodes","scope","args","context","results","evalBlockNode","result","push","callback","i","length","_ifNode","clone","_toString","options","param","toString","join","toJSON","mathjs","toHTML","_toTex","toTex","fromJSON","json","isClass"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/expression/node/BlockNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ResultSet,\n    Node\n  } = _ref;\n  class BlockNode extends Node {\n    /**\n     * @constructor BlockNode\n     * @extends {Node}\n     * Holds a set with blocks\n     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n     *            An array with blocks, where a block is constructed as an\n     *            Object with properties block, which is a Node, and visible,\n     *            which is a boolean. The property visible is optional and\n     *            is true by default\n     */\n    constructor(blocks) {\n      super();\n      // validate input, copy blocks\n      if (!Array.isArray(blocks)) throw new Error('Array expected');\n      this.blocks = blocks.map(function (block) {\n        var node = block && block.node;\n        var visible = block && block.visible !== undefined ? block.visible : true;\n        if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n        if (typeof visible !== 'boolean') {\n          throw new TypeError('Property \"visible\" must be a boolean');\n        }\n        return {\n          node,\n          visible\n        };\n      });\n    }\n    get type() {\n      return name;\n    }\n    get isBlockNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalBlocks = map(this.blocks, function (block) {\n        return {\n          evaluate: block.node._compile(math, argNames),\n          visible: block.visible\n        };\n      });\n      return function evalBlockNodes(scope, args, context) {\n        var results = [];\n        forEach(evalBlocks, function evalBlockNode(block) {\n          var result = block.evaluate(scope, args, context);\n          if (block.visible) {\n            results.push(result);\n          }\n        });\n        return new ResultSet(results);\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child blocks of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.blocks.length; i++) {\n        callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n      }\n    }\n\n    /**\n     * Create a new BlockNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {BlockNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var blocks = [];\n      for (var i = 0; i < this.blocks.length; i++) {\n        var block = this.blocks[i];\n        var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n        blocks[i] = {\n          node,\n          visible: block.visible\n        };\n      }\n      return new BlockNode(blocks);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {BlockNode}\n     */\n    clone() {\n      var blocks = this.blocks.map(function (block) {\n        return {\n          node: block.node,\n          visible: block.visible\n        };\n      });\n      return new BlockNode(blocks);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toString(options) + (param.visible ? '' : ';');\n      }).join('\\n');\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        blocks: this.blocks\n      };\n    }\n\n    /**\n     * Instantiate an BlockNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n     *     where mathjs is optional\n     * @returns {BlockNode}\n     */\n    static fromJSON(json) {\n      return new BlockNode(json.blocks);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n      }).join('<span class=\"math-separator\"><br /></span>');\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toTex(options) + (param.visible ? '' : ';');\n      }).join('\\\\;\\\\;\\n');\n    }\n  }\n  _defineProperty(BlockNode, \"name\", name);\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}