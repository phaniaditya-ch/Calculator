{"ast":null,"code":"import _classCallCheck from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n    matrix = _ref.matrix,\n    Node = _ref.Node;\n  var access = accessFactory({\n    subset: subset\n  });\n  var assign = assignFactory({\n    subset: subset,\n    matrix: matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  var AssignmentNode = /*#__PURE__*/function (_Node) {\n    _inherits(AssignmentNode, _Node);\n    var _super = _createSuper(AssignmentNode);\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    function AssignmentNode(object, index, value) {\n      var _this;\n      _classCallCheck(this, AssignmentNode);\n      _this = _super.call(this);\n      _this.object = object;\n      _this.index = value ? index : null;\n      _this.value = value || index;\n\n      // validate input\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (_this.index && !isIndexNode(_this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!isNode(_this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n      return _this;\n    }\n\n    // class name for typing purposes:\n\n    // readonly property name\n    _createClass(AssignmentNode, [{\n      key: \"name\",\n      get: function get() {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isAssignmentNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalObject = this.object._compile(math, argNames);\n        var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n        var evalValue = this.value._compile(math, argNames);\n        var name = this.object.name;\n        if (!this.index) {\n          // apply a variable to the scope, for example `a=2`\n          if (!isSymbolNode(this.object)) {\n            throw new TypeError('SymbolNode expected as object');\n          }\n          return function evalAssignmentNode(scope, args, context) {\n            var value = evalValue(scope, args, context);\n            scope.set(name, value);\n            return value;\n          };\n        } else if (this.index.isObjectProperty()) {\n          // apply an object property for example `a.b=2`\n          var prop = this.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(object, prop, value);\n            return value;\n          };\n        } else if (isSymbolNode(this.object)) {\n          // update a matrix subset, for example `a[2]=3`\n          return function evalAssignmentNode(scope, args, context) {\n            var childObject = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            // Important:  we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            scope.set(name, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // isAccessorNode(node.object) === true\n          // update a matrix subset, for example `a.b[2]=3`\n\n          // we will not use the compile function of the AccessorNode, but\n          // compile it ourselves here as we need the parent object of the\n          // AccessorNode:\n          // wee need to apply the updated object to parent object\n          var evalParentObject = this.object.object._compile(math, argNames);\n          if (this.object.index.isObjectProperty()) {\n            var parentProp = this.object.index.getObjectProperty();\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              var childObject = getSafeProperty(parent, parentProp);\n              // Important: we pass childObject instead of context:\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              setSafeProperty(parent, parentProp, assign(childObject, index, value));\n              return value;\n            };\n          } else {\n            // if some parameters use the 'end' parameter, we need to calculate\n            // the size\n            var evalParentIndex = this.object.index._compile(math, argNames);\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              // Important: we pass parent instead of context:\n              var parentIndex = evalParentIndex(scope, args, parent);\n              var childObject = access(parent, parentIndex);\n              // Important:  we pass childObject instead of context\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              assign(parent, parentIndex, assign(childObject, index, value));\n              return value;\n            };\n          }\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.object, 'object', this);\n        if (this.index) {\n          callback(this.index, 'index', this);\n        }\n        callback(this.value, 'value', this);\n      }\n\n      /**\n       * Create a new AssignmentNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {AssignmentNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var object = this._ifNode(callback(this.object, 'object', this));\n        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n        var value = this._ifNode(callback(this.value, 'value', this));\n        return new AssignmentNode(object, index, value);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {AssignmentNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new AssignmentNode(this.object, this.index, this.value);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var object = this.object.toString(options);\n        var index = this.index ? this.index.toString(options) : '';\n        var value = this.value.toString(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '(' + value + ')';\n        }\n        return object + index + ' = ' + value;\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          object: this.object,\n          index: this.index,\n          value: this.value\n        };\n      }\n\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n       *     where mathjs is optional\n       * @returns {AssignmentNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string}\n       */\n      function toHTML(options) {\n        var object = this.object.toHTML(options);\n        var index = this.index ? this.index.toHTML(options) : '';\n        var value = this.value.toHTML(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n        }\n        return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var object = this.object.toTex(options);\n        var index = this.index ? this.index.toTex(options) : '';\n        var value = this.value.toTex(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = \"\\\\left(\".concat(value, \"\\\\right)\");\n        }\n        return object + index + ':=' + value;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new AssignmentNode(json.object, json.index, json.value);\n      }\n    }]);\n    return AssignmentNode;\n  }(Node);\n  _defineProperty(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isIndexNode","isNode","isSymbolNode","getSafeProperty","setSafeProperty","factory","accessFactory","assignFactory","getPrecedence","name","dependencies","createAssignmentNode","_ref","subset","matrix","Node","access","assign","needParenthesis","node","parenthesis","implicit","precedence","exprPrecedence","value","AssignmentNode","_Node","_inherits","_super","_createSuper","object","index","_this","_classCallCheck","call","TypeError","Error","_createClass","key","get","isObjectProperty","getObjectProperty","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","set","prop","childObject","evalParentObject","parentProp","parent","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","_toString","options","toString","toJSON","mathjs","toHTML","_toTex","toTex","concat","fromJSON","json","isClass"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class AssignmentNode extends Node {\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    constructor(object, index, value) {\n      super();\n      this.object = object;\n      this.index = value ? index : null;\n      this.value = value || index;\n\n      // validate input\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (this.index && !isIndexNode(this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!isNode(this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n    }\n\n    // class name for typing purposes:\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n      var evalValue = this.value._compile(math, argNames);\n      var name = this.object.name;\n      if (!this.index) {\n        // apply a variable to the scope, for example `a=2`\n        if (!isSymbolNode(this.object)) {\n          throw new TypeError('SymbolNode expected as object');\n        }\n        return function evalAssignmentNode(scope, args, context) {\n          var value = evalValue(scope, args, context);\n          scope.set(name, value);\n          return value;\n        };\n      } else if (this.index.isObjectProperty()) {\n        // apply an object property for example `a.b=2`\n        var prop = this.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          setSafeProperty(object, prop, value);\n          return value;\n        };\n      } else if (isSymbolNode(this.object)) {\n        // update a matrix subset, for example `a[2]=3`\n        return function evalAssignmentNode(scope, args, context) {\n          var childObject = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          // Important:  we pass childObject instead of context:\n          var index = evalIndex(scope, args, childObject);\n          scope.set(name, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // isAccessorNode(node.object) === true\n        // update a matrix subset, for example `a.b[2]=3`\n\n        // we will not use the compile function of the AccessorNode, but\n        // compile it ourselves here as we need the parent object of the\n        // AccessorNode:\n        // wee need to apply the updated object to parent object\n        var evalParentObject = this.object.object._compile(math, argNames);\n        if (this.object.index.isObjectProperty()) {\n          var parentProp = this.object.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            var childObject = getSafeProperty(parent, parentProp);\n            // Important: we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(parent, parentProp, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // if some parameters use the 'end' parameter, we need to calculate\n          // the size\n          var evalParentIndex = this.object.index._compile(math, argNames);\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            // Important: we pass parent instead of context:\n            var parentIndex = evalParentIndex(scope, args, parent);\n            var childObject = access(parent, parentIndex);\n            // Important:  we pass childObject instead of context\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            assign(parent, parentIndex, assign(childObject, index, value));\n            return value;\n          };\n        }\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      if (this.index) {\n        callback(this.index, 'index', this);\n      }\n      callback(this.value, 'value', this);\n    }\n\n    /**\n     * Create a new AssignmentNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var object = this._ifNode(callback(this.object, 'object', this));\n      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n      var value = this._ifNode(callback(this.value, 'value', this));\n      return new AssignmentNode(object, index, value);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AssignmentNode}\n     */\n    clone() {\n      return new AssignmentNode(this.object, this.index, this.value);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      var index = this.index ? this.index.toString(options) : '';\n      var value = this.value.toString(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '(' + value + ')';\n      }\n      return object + index + ' = ' + value;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index,\n        value: this.value\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n     *     where mathjs is optional\n     * @returns {AssignmentNode}\n     */\n    static fromJSON(json) {\n      return new AssignmentNode(json.object, json.index, json.value);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      var index = this.index ? this.index.toHTML(options) : '';\n      var value = this.value.toHTML(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n      return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      var index = this.index ? this.index.toTex(options) : '';\n      var value = this.value.toTex(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = \"\\\\left(\".concat(value, \"\\\\right)\");\n      }\n      return object + index + ':=' + value;\n    }\n  }\n  _defineProperty(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}