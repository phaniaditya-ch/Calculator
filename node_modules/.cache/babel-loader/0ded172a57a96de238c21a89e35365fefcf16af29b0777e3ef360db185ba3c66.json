{"ast":null,"code":"import _toConsumableArray from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nimport { createBroadcast } from './broadcast.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix', 'concat'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    concat = _ref.concat;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed: typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed: typed\n  });\n  var broadcast = createBroadcast({\n    concat: concat\n  });\n\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, y)).concat([elop]));\n        },\n        'Array, Array': function ArrayArray(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), matrix(y))).concat([elop])).valueOf();\n        },\n        'Array, DenseMatrix': function ArrayDenseMatrix(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), y)).concat([elop]));\n        },\n        'DenseMatrix, Array': function DenseMatrixArray(x, y) {\n          return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, matrix(y))).concat([elop]));\n        }\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = function (x, y) {\n          return options.SS.apply(options, _toConsumableArray(broadcast(x, y)).concat([elop, false]));\n        };\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = function (x, y) {\n          return options.DS.apply(options, _toConsumableArray(broadcast(x, y)).concat([elop, false]));\n        };\n        matrixSignatures['Array, SparseMatrix'] = function (x, y) {\n          return options.DS.apply(options, _toConsumableArray(broadcast(matrix(x), y)).concat([elop, false]));\n        };\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = function (x, y) {\n          return SD.apply(void 0, _toConsumableArray(broadcast(y, x)).concat([elop, true]));\n        };\n        matrixSignatures['SparseMatrix, Array'] = function (x, y) {\n          return SD.apply(void 0, _toConsumableArray(broadcast(matrix(y), x)).concat([elop, true]));\n        };\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, y)).concat([self]));\n          };\n        }),\n        'Array, Array': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), matrix(y))).concat([self])).valueOf();\n          };\n        }),\n        'Array, DenseMatrix': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(matrix(x), y)).concat([self]));\n          };\n        }),\n        'DenseMatrix, Array': typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo13xDD.apply(void 0, _toConsumableArray(broadcast(x, matrix(y))).concat([self]));\n          };\n        })\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.SS.apply(options, _toConsumableArray(broadcast(x, y)).concat([self, false]));\n          };\n        });\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.DS.apply(options, _toConsumableArray(broadcast(x, y)).concat([self, false]));\n          };\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.DS.apply(options, _toConsumableArray(broadcast(matrix(x), y)).concat([self, false]));\n          };\n        });\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return SD.apply(void 0, _toConsumableArray(broadcast(y, x)).concat([self, true]));\n          };\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return SD.apply(void 0, _toConsumableArray(broadcast(matrix(y), x)).concat([self, true]));\n          };\n        });\n      }\n    }\n\n    // Now add the scalars\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = function (x, y) {\n          return matAlgo14xDs(x, y, elop, false);\n        };\n        matrixSignatures[scalar + ', DenseMatrix'] = function (x, y) {\n          return matAlgo14xDs(y, x, elop, true);\n        };\n        matrixSignatures['Array,' + scalar] = function (x, y) {\n          return matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n        };\n        matrixSignatures[scalar + ', Array'] = function (x, y) {\n          return matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n        };\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(x, y, self, false);\n          };\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(y, x, self, true);\n          };\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n          };\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n          };\n        });\n      }\n    }\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = function (x, y) {\n          return options.Ss(x, y, elop, false);\n        };\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = function (x, y) {\n          return sS(y, x, elop, true);\n        };\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return options.Ss(x, y, self, false);\n          };\n        });\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(function (self) {\n          return function (x, y) {\n            return sS(y, x, self, true);\n          };\n        });\n      }\n    }\n    // Also pull in the scalar signatures if the operator is a typed function\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n    return matrixSignatures;\n  };\n});","map":{"version":3,"names":["factory","extend","createMatAlgo13xDD","createMatAlgo14xDs","createBroadcast","name","dependencies","createMatrixAlgorithmSuite","_ref","typed","matrix","concat","matAlgo13xDD","matAlgo14xDs","broadcast","matrixAlgorithmSuite","options","elop","SD","DS","matrixSignatures","DenseMatrixDenseMatrix","x","y","apply","_toConsumableArray","ArrayArray","valueOf","ArrayDenseMatrix","DenseMatrixArray","SS","referToSelf","self","scalar","Ds","Ss","sS","undefined","signatures"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nimport { createBroadcast } from './broadcast.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix', 'concat'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    concat\n  } = _ref;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var broadcast = createBroadcast({\n    concat\n  });\n\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(x, y), elop),\n        'Array, Array': (x, y) => matAlgo13xDD(...broadcast(matrix(x), matrix(y)), elop).valueOf(),\n        'Array, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(matrix(x), y), elop),\n        'DenseMatrix, Array': (x, y) => matAlgo13xDD(...broadcast(x, matrix(y)), elop)\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(...broadcast(x, y), elop, false);\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(...broadcast(x, y), elop, false);\n        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(...broadcast(matrix(x), y), elop, false);\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(...broadcast(y, x), elop, true);\n        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(...broadcast(matrix(y), x), elop, true);\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(x, y), self);\n        }),\n        'Array, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(matrix(x), matrix(y)), self).valueOf();\n        }),\n        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(matrix(x), y), self);\n        }),\n        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(x, matrix(y)), self);\n        })\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.SS(...broadcast(x, y), self, false);\n        });\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(...broadcast(x, y), self, false);\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(...broadcast(matrix(x), y), self, false);\n        });\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return SD(...broadcast(y, x), self, true);\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {\n          return SD(...broadcast(matrix(y), x), self, true);\n        });\n      }\n    }\n\n    // Now add the scalars\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);\n        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);\n        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(x, y, self, false);\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(y, x, self, true);\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n        });\n      }\n    }\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return options.Ss(x, y, self, false);\n        });\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return sS(y, x, self, true);\n        });\n      }\n    }\n    // Also pull in the scalar signatures if the operator is a typed function\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n    return matrixSignatures;\n  };\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}