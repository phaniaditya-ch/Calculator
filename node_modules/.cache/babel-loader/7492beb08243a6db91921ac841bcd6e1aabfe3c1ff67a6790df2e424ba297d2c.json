{"ast":null,"code":"import _classCallCheck from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isArrayNode, isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  var ArrayNode = /*#__PURE__*/function (_Node) {\n    _inherits(ArrayNode, _Node);\n    var _super = _createSuper(ArrayNode);\n    /**\n     * @constructor ArrayNode\n     * @extends {Node}\n     * Holds an 1-dimensional array with items\n     * @param {Node[]} [items]   1 dimensional array with items\n     */\n    function ArrayNode(items) {\n      var _this;\n      _classCallCheck(this, ArrayNode);\n      _this = _super.call(this);\n      _this.items = items || [];\n\n      // validate input\n      if (!Array.isArray(_this.items) || !_this.items.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected');\n      }\n      return _this;\n    }\n    _createClass(ArrayNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isArrayNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalItems = map(this.items, function (item) {\n          return item._compile(math, argNames);\n        });\n        var asMatrix = math.config.matrix !== 'Array';\n        if (asMatrix) {\n          var matrix = math.matrix;\n          return function evalArrayNode(scope, args, context) {\n            return matrix(map(evalItems, function (evalItem) {\n              return evalItem(scope, args, context);\n            }));\n          };\n        } else {\n          return function evalArrayNode(scope, args, context) {\n            return map(evalItems, function (evalItem) {\n              return evalItem(scope, args, context);\n            });\n          };\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        for (var i = 0; i < this.items.length; i++) {\n          var node = this.items[i];\n          callback(node, 'items[' + i + ']', this);\n        }\n      }\n\n      /**\n       * Create a new ArrayNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {ArrayNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var items = [];\n        for (var i = 0; i < this.items.length; i++) {\n          items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n        }\n        return new ArrayNode(items);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {ArrayNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new ArrayNode(this.items.slice(0));\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var items = this.items.map(function (node) {\n          return node.toString(options);\n        });\n        return '[' + items.join(', ') + ']';\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          items: this.items\n        };\n      }\n\n      /**\n       * Instantiate an ArrayNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n       *                       where mathjs is optional\n       * @returns {ArrayNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toHTML(options) {\n        var items = this.items.map(function (node) {\n          return node.toHTML(options);\n        });\n        return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        function itemsToTex(items, nested) {\n          var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);\n          var itemsFormRow = nested || mixedItems;\n          var itemSep = itemsFormRow ? '&' : '\\\\\\\\';\n          var itemsTex = items.map(function (node) {\n            if (node.items) {\n              return itemsToTex(node.items, !nested);\n            } else {\n              return node.toTex(options);\n            }\n          }).join(itemSep);\n          return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\\\begin{bmatrix}' + itemsTex + '\\\\end{bmatrix}' : itemsTex;\n        }\n        return itemsToTex(this.items, false);\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new ArrayNode(json.items);\n      }\n    }]);\n    return ArrayNode;\n  }(Node);\n  _defineProperty(ArrayNode, \"name\", name);\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isArrayNode","isNode","map","factory","name","dependencies","createArrayNode","_ref","Node","ArrayNode","_Node","_inherits","_super","_createSuper","items","_this","_classCallCheck","call","Array","isArray","every","TypeError","_createClass","key","get","value","_compile","math","argNames","evalItems","item","asMatrix","config","matrix","evalArrayNode","scope","args","context","evalItem","forEach","callback","i","length","node","_ifNode","clone","slice","_toString","options","toString","join","toJSON","mathjs","toHTML","_toTex","itemsToTex","nested","mixedItems","some","itemsFormRow","itemSep","itemsTex","toTex","fromJSON","json","isClass"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/expression/node/ArrayNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isArrayNode, isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ArrayNode extends Node {\n    /**\n     * @constructor ArrayNode\n     * @extends {Node}\n     * Holds an 1-dimensional array with items\n     * @param {Node[]} [items]   1 dimensional array with items\n     */\n    constructor(items) {\n      super();\n      this.items = items || [];\n\n      // validate input\n      if (!Array.isArray(this.items) || !this.items.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected');\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isArrayNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalItems = map(this.items, function (item) {\n        return item._compile(math, argNames);\n      });\n      var asMatrix = math.config.matrix !== 'Array';\n      if (asMatrix) {\n        var matrix = math.matrix;\n        return function evalArrayNode(scope, args, context) {\n          return matrix(map(evalItems, function (evalItem) {\n            return evalItem(scope, args, context);\n          }));\n        };\n      } else {\n        return function evalArrayNode(scope, args, context) {\n          return map(evalItems, function (evalItem) {\n            return evalItem(scope, args, context);\n          });\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.items.length; i++) {\n        var node = this.items[i];\n        callback(node, 'items[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new ArrayNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {ArrayNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var items = [];\n      for (var i = 0; i < this.items.length; i++) {\n        items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n      }\n      return new ArrayNode(items);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ArrayNode}\n     */\n    clone() {\n      return new ArrayNode(this.items.slice(0));\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      var items = this.items.map(function (node) {\n        return node.toString(options);\n      });\n      return '[' + items.join(', ') + ']';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        items: this.items\n      };\n    }\n\n    /**\n     * Instantiate an ArrayNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n     *                       where mathjs is optional\n     * @returns {ArrayNode}\n     */\n    static fromJSON(json) {\n      return new ArrayNode(json.items);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      var items = this.items.map(function (node) {\n        return node.toHTML(options);\n      });\n      return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      function itemsToTex(items, nested) {\n        var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);\n        var itemsFormRow = nested || mixedItems;\n        var itemSep = itemsFormRow ? '&' : '\\\\\\\\';\n        var itemsTex = items.map(function (node) {\n          if (node.items) {\n            return itemsToTex(node.items, !nested);\n          } else {\n            return node.toTex(options);\n          }\n        }).join(itemSep);\n        return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\\\begin{bmatrix}' + itemsTex + '\\\\end{bmatrix}' : itemsTex;\n      }\n      return itemsToTex(this.items, false);\n    }\n  }\n  _defineProperty(ArrayNode, \"name\", name);\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}