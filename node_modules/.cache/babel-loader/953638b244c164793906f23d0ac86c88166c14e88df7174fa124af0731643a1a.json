{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  return typed(name, {\n    '': function _() {\n      return _randomInt(0, 1);\n    },\n    number: function number(max) {\n      return _randomInt(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _randomInt(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomIntMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomIntMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomIntMatrix(size, min, max);\n    }\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _randomInt(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});","map":{"version":3,"names":["factory","randomMatrix","createRng","isMatrix","name","dependencies","createRandomInt","_ref","typed","config","on","rng","randomSeed","curr","prev","_","_randomInt","number","max","numberNumber","min","ArrayMatrix","size","_randomIntMatrix","ArrayMatrixNumber","ArrayMatrixNumberNumber","res","valueOf","create","Math","floor"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/function/probability/randomInt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  return typed(name, {\n    '': () => _randomInt(0, 1),\n    number: max => _randomInt(0, max),\n    'number, number': (min, max) => _randomInt(min, max),\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\n    return isMatrix(size) ? size.create(res) : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;AAC7C,OAAO,IAAIC,eAAe,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAE,UAAAE,IAAI,EAAI;EAC9E,IACEC,KAAK,GAGHD,IAAI,CAHNC,KAAK;IACLC,MAAM,GAEJF,IAAI,CAFNE,MAAM;IACNC,EAAE,GACAH,IAAI,CADNG,EAAE;EAEJ;EACA,IAAIC,GAAG,GAAGT,SAAS,CAACO,MAAM,CAACG,UAAU,CAAC;EACtC,IAAIF,EAAE,EAAE;IACNA,EAAE,CAAC,QAAQ,EAAE,UAAUG,IAAI,EAAEC,IAAI,EAAE;MACjC,IAAID,IAAI,CAACD,UAAU,KAAKE,IAAI,CAACF,UAAU,EAAE;QACvCD,GAAG,GAAGT,SAAS,CAACW,IAAI,CAACD,UAAU,CAAC;MAClC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOJ,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,SAAAW,EAAA;MAAA,OAAMC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IAAA;IAC1BC,MAAM,EAAE,SAAAA,OAAAC,GAAG;MAAA,OAAIF,UAAU,CAAC,CAAC,EAAEE,GAAG,CAAC;IAAA;IACjC,gBAAgB,EAAE,SAAAC,aAACC,GAAG,EAAEF,GAAG;MAAA,OAAKF,UAAU,CAACI,GAAG,EAAEF,GAAG,CAAC;IAAA;IACpD,gBAAgB,EAAE,SAAAG,YAAAC,IAAI;MAAA,OAAIC,gBAAgB,CAACD,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IAAA;IACtD,wBAAwB,EAAE,SAAAE,kBAACF,IAAI,EAAEJ,GAAG;MAAA,OAAKK,gBAAgB,CAACD,IAAI,EAAE,CAAC,EAAEJ,GAAG,CAAC;IAAA;IACvE,gCAAgC,EAAE,SAAAO,wBAACH,IAAI,EAAEF,GAAG,EAAEF,GAAG;MAAA,OAAKK,gBAAgB,CAACD,IAAI,EAAEF,GAAG,EAAEF,GAAG,CAAC;IAAA;EACxF,CAAC,CAAC;EACF,SAASK,gBAAgBA,CAACD,IAAI,EAAEF,GAAG,EAAEF,GAAG,EAAE;IACxC,IAAIQ,GAAG,GAAGzB,YAAY,CAACqB,IAAI,CAACK,OAAO,EAAE,EAAE;MAAA,OAAMX,UAAU,CAACI,GAAG,EAAEF,GAAG,CAAC;IAAA,EAAC;IAClE,OAAOf,QAAQ,CAACmB,IAAI,CAAC,GAAGA,IAAI,CAACM,MAAM,CAACF,GAAG,CAAC,GAAGA,GAAG;EAChD;EACA,SAASV,UAAUA,CAACI,GAAG,EAAEF,GAAG,EAAE;IAC5B,OAAOW,IAAI,CAACC,KAAK,CAACV,GAAG,GAAGT,GAAG,EAAE,IAAIO,GAAG,GAAGE,GAAG,CAAC,CAAC;EAC9C;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}