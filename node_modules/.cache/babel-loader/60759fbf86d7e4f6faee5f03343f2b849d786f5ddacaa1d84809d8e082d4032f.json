{"ast":null,"code":"import _defineProperty from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/chpha/Desktop/calculator/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\nfunction is1d(array) {\n  return !array.some(function (element) {\n    return Array.isArray(element);\n  });\n}\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var _typed;\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix,\n    concat = _ref.concat;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed: typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix,\n    concat: concat\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), (_typed = {}, _defineProperty(_typed, gcdManyTypesSignature, typed.referToSelf(function (self) {\n    return function (a, b, args) {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    };\n  })), _defineProperty(_typed, \"Array\", typed.referToSelf(function (self) {\n    return function (array) {\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\n        return self.apply(void 0, _toConsumableArray(array[0]));\n      }\n      if (is1d(array)) {\n        return self.apply(void 0, _toConsumableArray(array));\n      }\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\n    };\n  })), _defineProperty(_typed, \"Matrix\", typed.referToSelf(function (self) {\n    return function (matrix) {\n      return self(matrix.toArray());\n    };\n  })), _typed));\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","gcdNumber","ArgumentsError","name","dependencies","gcdTypes","gcdManyTypesSignature","concat","is1d","array","some","element","Array","isArray","createGcd","_ref","_typed","typed","matrix","equalScalar","BigNumber","DenseMatrix","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","_gcdBigNumber","FractionFraction","x","y","gcd","SS","DS","Ss","_defineProperty","referToSelf","self","a","b","args","res","i","length","apply","_toConsumableArray","toArray","isInt","Error","zero","isZero","r","mod","lt","neg"],"sources":["C:/Users/chpha/Desktop/calculator/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\nfunction is1d(array) {\n  return !array.some(element => Array.isArray(element));\n}\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), {\n    [gcdManyTypesSignature]: typed.referToSelf(self => (a, b, args) => {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    }),\n    Array: typed.referToSelf(self => array => {\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\n        return self(...array[0]);\n      }\n      if (is1d(array)) {\n        return self(...array);\n      }\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\n    }),\n    Matrix: typed.referToSelf(self => matrix => {\n      return self(matrix.toArray());\n    })\n  });\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}